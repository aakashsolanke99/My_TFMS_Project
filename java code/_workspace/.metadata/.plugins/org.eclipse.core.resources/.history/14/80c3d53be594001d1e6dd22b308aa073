package com.revature.model;
import  com.revature.constant.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import static java.lang.System.*;


public interface AssociateDetails {
	
	static ArrayList<Associate> l=new ArrayList<Associate>();
	public abstract void addDetails();
	public abstract void listAssociateDetails();
	public abstract void deleteAssociateaDetails();
    public abstract void updateAssociateDetails();
}

class Userdetails extends Associate implements AssociateDetails {
	
	Constant constant= new Constant();
	Scanner scInt= new Scanner(System.in);
	Scanner scString= new Scanner(System.in);
	Menu menu= new Menu();
	
	int choice;	
	

	public void addDetails() {
		
		out.println(constant.ENTERASSOCIATEDETAILS);
		do {
			
			
			
			out.println(constant.ASSOCIATEID);
			int Id =scInt.nextInt();
			
			out.println(constant.ASSOCIATENAME);
			String Name =scString.nextLine();
			
			out.println(constant.ASSOCIATETRACK);
			String Track=scString.nextLine().toUpperCase();
			
			if(Track.equals(AssociateTrack.JAVA.toString()) || Track.equals(AssociateTrack.MAINFRAME.toString()) || Track.equals(AssociateTrack.TEASTING.toString()) || Track.equals(AssociateTrack.DOTNET.toString()) ) {
			    
			}
			else {
				out.println("\nInvalid input please enter correct input ");
			}
			
			out.println(constant.ASSOCIATEQUALIFICATION);
			String Qualification = scString.nextLine();
			
			out.println(constant.ASSOCIATEEXPERIENCE);
			String Experience =scString.nextLine();
			
			out.println("");
			Associate a1=new Associate(Id,Name,Track,Qualification,Experience);
			l.add(a1);
			
			int sizeoflist=l.size();
			out.println("Number of Associates are :- "+sizeoflist);
			out.println("\nIf you want to enter more data press - 1 :-");
			choice =scInt.nextInt();
		

		}while(choice==1);
	 			
	}	
		
        public void listAssociateDetails() {
        	
           out.println(constant.SHOWASSOCIATEDETAILS+ "\n");
           
           for (Associate associate : l) {
		      out.println(constant.ASSOCIATEID +" "+ associate.getAssociateId());
	          out.println(constant.ASSOCIATENAME + " "+ associate.getAssociateName());
	          out.println(constant.ASSOCIATETRACK + " "+ associate.getAssociateTrack());
		      out.println(constant.ASSOCIATEQUALIFICATION + " " + associate.getAssociateQualification());
		      out.println(constant.ASSOCIATEEXPERIENCE +" "+ associate.getAssociateExperience()+"\n");
		      out.println("------------------------------------------------------");
		
             }

    } 	
		
		
	public void deleteAssociateaDetails() {
		int temp;
		Iterator<Associate> itr = l.iterator();
		do {
			
			while(itr.hasNext()) {
				out.print("Enter Associate Id which yoy want delelt:-");
				int del=scInt.nextInt();
				
				if(itr.next().getAssociateId()==del) {
				     itr.remove();
				     out.print("\nData Deleted Successful for Associate Id:-"+ del);
       			     break;
				}
		}
			
		if(l.isEmpty()) {
		    out.println("\nTher is no data present in database");
			break;
		}else {
				out.println("\nYou want to delete more then press :- 2");
			    temp= scInt.nextInt();
			  }
			
		}while(temp==2);
		
	}
	
	
	public void updateAssociateDetails() {
		int cheak;
		do {
			System.out.println("enter the associate id for which you want to update ");
			int tempAssoc= scInt.nextInt();
			
			System.out.println(" -------- select what you want to update ------");
			System.out.println("1.Name");
			System.out.println("2.Track");
			System.out.println("3.qualification");
			System.out.println("4.Experience");
            
			System.out.println("enter your choice:- \n");
			int cheak1=scInt.nextInt();
			switch(cheak1 ) {
			
			case 1:
				for (Associate associate : l) {
					
					if(tempAssoc==(associate.getAssociateId())) {
						
					    System.out.println("Enter the updated name :- \n");
					    String newname= scString.nextLine();
						associate.setAssociateName(newname);
					}
					else {
						System.out.println("Wrong Associate Id provide correct Id please ...\n");
					}
				
			
			        }  
			;break;
			
			case 2 :
				for (Associate associate : l) {
					     
                        if(tempAssoc==(associate.getAssociateId())) {
					    System.out.println("Enter the updated Track :- \n");
					    String newname= scString.nextLine();
						associate.setAssociateTrack(newname);
					}
					
				}
				;break;
				
			case 3 :
				for (Associate associate : l) {
					     
                        if(tempAssoc==(associate.getAssociateId())) {
					    System.out.println("Enter the updated Associate qualification :- \n");
					    String newname= scString.nextLine();
						associate.setAssociateQualification(newname);
					}
					
				}
				;break;
				
			case 4 :
				for (Associate associate : l) {
					     
                        if(tempAssoc==(associate.getAssociateId())) {
					    System.out.println("Enter the updated  Experience :- \n");
					    String newname= scString.nextLine();
						associate.setAssociateExperience(newname);;
					}
					
				}
				;break;
			}
			
			System.out.println("you want to update more press-3\n");
			cheak=scInt.nextInt();
			
		}while(cheak==3);
		
	
		}
	}
		

		
     
	
	
	



/*
 *  if(customer!=null && "Doe".equals(customer.getName())) {
        customer.setEmail("abc@xyz.com");
        break;
    }
    
    //		for (Associate associate : l) {
//			if("aakash".equals(associate.getAssociateName())) {
//				associate.setAssociateExperience("12 new");
//			}
//		   
//		}
 * 
 * 
 *  while (itr.hasNext()) {
  
            // Remove elements smaller than 10 using
            // Iterator.remove()
            int x = (Integer)itr.next();
            if (x < 10)
                itr.remove();
        }
 */

